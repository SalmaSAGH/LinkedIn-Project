// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  //output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(cuid())
  name        String?
  email       String       @unique
  password    String?
  image       String? // photo profil URL
  bio         String? // bio courte
  skills      String[] // tableau de comp√©tences
  experiences Experience[]
  educations  Education[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Post Post[]

  Like Like[]

  Comment Comment[]
}

model Experience {
  id          String    @id @default(cuid())
  userId      String
  title       String
  company     String
  startDate   DateTime
  endDate     DateTime?
  description String?

  user User @relation(fields: [userId], references: [id])
}

model Education {
  id          String    @id @default(cuid())
  userId      String
  school      String
  degree      String
  startDate   DateTime
  endDate     DateTime?
  description String?

  user User @relation(fields: [userId], references: [id])
}

model Post {
  id        String   @id @default(cuid())
  userId    String
  title     String
  body      String
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  Like Like[]

  Comment Comment[]
}

model Like {
  id     String @id @default(cuid())
  userId String
  postId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId]) // Un utilisateur ne peut liker qu'une seule fois par post
}

model Comment {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}
